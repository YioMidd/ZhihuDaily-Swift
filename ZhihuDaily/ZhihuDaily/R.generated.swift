//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `Back_White`.
    static let back_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back_White")
    /// Image `Browser_Button_Highlight`.
    static let browser_Button_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Button_Highlight")
    /// Image `Browser_Button`.
    static let browser_Button = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Button")
    /// Image `Browser_Icon1_Back_Highlight`.
    static let browser_Icon1_Back_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon1_Back_Highlight")
    /// Image `Browser_Icon1_Back`.
    static let browser_Icon1_Back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon1_Back")
    /// Image `Browser_Icon_Action_Highlight`.
    static let browser_Icon_Action_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Action_Highlight")
    /// Image `Browser_Icon_Action`.
    static let browser_Icon_Action = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Action")
    /// Image `Browser_Icon_Back_Disable`.
    static let browser_Icon_Back_Disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Back_Disable")
    /// Image `Browser_Icon_Back_Highlight`.
    static let browser_Icon_Back_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Back_Highlight")
    /// Image `Browser_Icon_Back`.
    static let browser_Icon_Back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Back")
    /// Image `Browser_Icon_Forward_Disable`.
    static let browser_Icon_Forward_Disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Forward_Disable")
    /// Image `Browser_Icon_Forward_Highlight`.
    static let browser_Icon_Forward_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Forward_Highlight")
    /// Image `Browser_Icon_Forward`.
    static let browser_Icon_Forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Forward")
    /// Image `Browser_Icon_Reload_Highlight`.
    static let browser_Icon_Reload_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Reload_Highlight")
    /// Image `Browser_Icon_Reload`.
    static let browser_Icon_Reload = Rswift.ImageResource(bundle: R.hostingBundle, name: "Browser_Icon_Reload")
    /// Image `Field_Button_Highlight_Bg`.
    static let field_Button_Highlight_Bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "Field_Button_Highlight_Bg")
    /// Image `Home_Icon`.
    static let home_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_Icon")
    /// Image `Home_Morepic`.
    static let home_Morepic = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_Morepic")
    /// Image `Image_Preview`.
    static let image_Preview = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image_Preview")
    /// Image `Menu_Close`.
    static let menu_Close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Close")
    /// Image `Menu_Dark`.
    static let menu_Dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Dark")
    /// Image `Menu_Day`.
    static let menu_Day = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Day")
    /// Image `Menu_Download`.
    static let menu_Download = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Download")
    /// Image `Menu_Enter`.
    static let menu_Enter = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Enter")
    /// Image `Menu_Follow`.
    static let menu_Follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Follow")
    /// Image `Menu_Icon_Collect`.
    static let menu_Icon_Collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Collect")
    /// Image `Menu_Icon_Events_Clicked`.
    static let menu_Icon_Events_Clicked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Events_Clicked")
    /// Image `Menu_Icon_Events`.
    static let menu_Icon_Events = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Events")
    /// Image `Menu_Icon_Home_Highlight`.
    static let menu_Icon_Home_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Home_Highlight")
    /// Image `Menu_Icon_Home`.
    static let menu_Icon_Home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Home")
    /// Image `Menu_Icon_Message_Point`.
    static let menu_Icon_Message_Point = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Message_Point")
    /// Image `Menu_Icon_Message`.
    static let menu_Icon_Message = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Message")
    /// Image `Menu_Icon_Setting`.
    static let menu_Icon_Setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Setting")
    /// Image `Menu_Mask`.
    static let menu_Mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Mask")
    /// Image `Splash_Image`.
    static let splash_Image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash_Image")
    /// Image `launchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "launchImage")
    
    /// `UIImage(named: "Back_White", bundle: ..., traitCollection: ...)`
    static func back_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_White, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Button", bundle: ..., traitCollection: ...)`
    static func browser_Button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Button_Highlight", bundle: ..., traitCollection: ...)`
    static func browser_Button_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Button_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon1_Back", bundle: ..., traitCollection: ...)`
    static func browser_Icon1_Back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon1_Back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon1_Back_Highlight", bundle: ..., traitCollection: ...)`
    static func browser_Icon1_Back_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon1_Back_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Action", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Action, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Action_Highlight", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Action_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Action_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Back", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Back_Disable", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Back_Disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Back_Disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Back_Highlight", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Back_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Back_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Forward", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Forward_Disable", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Forward_Disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Forward_Disable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Forward_Highlight", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Forward_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Forward_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Reload", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Reload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Reload, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Browser_Icon_Reload_Highlight", bundle: ..., traitCollection: ...)`
    static func browser_Icon_Reload_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_Icon_Reload_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Field_Button_Highlight_Bg", bundle: ..., traitCollection: ...)`
    static func field_Button_Highlight_Bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.field_Button_Highlight_Bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_Icon", bundle: ..., traitCollection: ...)`
    static func home_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_Icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_Morepic", bundle: ..., traitCollection: ...)`
    static func home_Morepic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_Morepic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Image_Preview", bundle: ..., traitCollection: ...)`
    static func image_Preview(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_Preview, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Close", bundle: ..., traitCollection: ...)`
    static func menu_Close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Dark", bundle: ..., traitCollection: ...)`
    static func menu_Dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Day", bundle: ..., traitCollection: ...)`
    static func menu_Day(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Day, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Download", bundle: ..., traitCollection: ...)`
    static func menu_Download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Enter", bundle: ..., traitCollection: ...)`
    static func menu_Enter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Enter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Follow", bundle: ..., traitCollection: ...)`
    static func menu_Follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Collect", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Events", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Events_Clicked", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Events_Clicked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Events_Clicked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Home", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Home_Highlight", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Home_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Home_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Message", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Message_Point", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Message_Point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Message_Point, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Setting", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Mask", bundle: ..., traitCollection: ...)`
    static func menu_Mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Mask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Splash_Image", bundle: ..., traitCollection: ...)`
    static func splash_Image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_Image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launchImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launchImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}